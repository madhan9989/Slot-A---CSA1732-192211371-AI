def print_board(board):
    """
    Print the current state of the board.

    Parameters:
    board (list): The Tic Tac Toe board.
    """
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    """
    Check if the given player has won the game.

    Parameters:
    board (list): The Tic Tac Toe board.
    player (str): The current player ('X' or 'O').

    Returns:
    bool: True if the player has won, False otherwise.
    """
    # Check rows, columns, and diagonals
    for row in board:
        if all([cell == player for cell in row]):
            return True

    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

def is_full(board):
    """
    Check if the board is full.

    Parameters:
    board (list): The Tic Tac Toe board.

    Returns:
    bool: True if the board is full, False otherwise.
    """
    return all([cell != ' ' for row in board for cell in row])

def tic_tac_toe():
    """
    Play a game of Tic Tac Toe.
    """
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'
    
    while True:
        print_board(board)
        
        # Get the current player's move
        while True:
            try:
                move = int(input(f"Player {current_player}, enter your move (1-9): ")) - 1
                if board[move // 3][move % 3] == ' ':
                    break
                else:
                    print("This cell is already occupied! Choose another one.")
            except (ValueError, IndexError):
                print("Invalid move! Please enter a number between 1 and 9.")
        
        # Make the move
        board[move // 3][move % 3] = current_player
        
        # Check for a winner
        if check_winner(board, current_player):
            print_board(board)
            print(f"Player {current_player} wins!")
            break
        
        # Check for a tie
        if is_full(board):
            print_board(board)
            print("It's a tie!")
            break
        
        # Switch players
        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    tic_tac_toe()
