import heapq
class PuzzleState:
    def __init__(self, board, parent=None, move=0, cost=0):
        self.board = board
        self.parent = parent
        self.move = move
        self.cost = cost
        self.key = self._generate_key()
    
    def _generate_key(self):
        return ''.join(str(tile) for row in self.board for tile in row)
    
    def __lt__(self, other):
        return self.cost < other.cost

def get_goal_state():
    return [[1, 2, 3], [4, 5, 6], [7, 8, 0]]

def is_goal(state):
    return state.board == get_goal_state()

def get_neighbors(state):
    neighbors = []
    x, y = [(ix, iy) for ix, row in enumerate(state.board) for iy, i in enumerate(row) if i == 0][0]
    
    directions = {'up': (x-1, y), 'down': (x+1, y), 'left': (x, y-1), 'right': (x, y+1)}
    
    for direction, (nx, ny) in directions.items():
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_board = [row[:] for row in state.board]
            new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
            neighbors.append(PuzzleState(new_board, state, state.move + 1))
    
    return neighbors

def manhattan_distance(state):
    distance = 0
    goal_positions = {value: (i, j) for i, row in enumerate(get_goal_state()) for j, value in enumerate(row)}
    for i in range(3):
        for j in range(3):
            if state.board[i][j] != 0:
                goal_i, goal_j = goal_positions[state.board[i][j]]
                distance += abs(i - goal_i) + abs(j - goal_j)
    return distance

def a_star_search(initial_state):
    open_set = []
    heapq.heappush(open_set, (0, initial_state))
    closed_set = set()
    while open_set:
        _, current_state = heapq.heappop(open_set)
        
        if is_goal(current_state):
            return current_state
        
        closed_set.add(current_state.key)
        
        for neighbor in get_neighbors(current_state):
            if neighbor.key in closed_set:
                continue
            
            neighbor.cost = neighbor.move + manhattan_distance(neighbor)
            heapq.heappush(open_set, (neighbor.cost, neighbor))
    
    return None

def reconstruct_path(state):
    path = []
    while state:
        path.append(state.board)
        state = state.parent
    return path[::-1]

def print_board(board):
    for row in board:
        print(' '.join(str(tile) if tile != 0 else ' ' for tile in row))
    print()

# Example usage:
initial_board = [[1, 2, 3], [4, 0, 5], [7, 8, 6]]
initial_state = PuzzleState(initial_board)
solution = a_star_search(initial_state)

if solution:
    path = reconstruct_path(solution)
    print("Solution found! Steps to solve the puzzle:")
    for step in path:
        print_board(step)
else:
    print("No solution found.")
