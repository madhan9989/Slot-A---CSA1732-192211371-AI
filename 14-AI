import math

def alphabeta(board, depth, alpha, beta, is_maximizing):
    """
    Alpha-Beta Pruning algorithm implementation for gaming.

    Parameters:
    board (list): The current state of the game board.
    depth (int): The depth of the current node in the game tree.
    alpha (int): The best score that the maximizing player can guarantee at the current node.
    beta (int): The best score that the minimizing player can guarantee at the current node.
    is_maximizing (bool): Indicates whether the current node is a maximizing node or not.

    Returns:
    int: The best score for the current node.
    """
    # Base case: check if the game is over or the maximum depth is reached
    if check_winner(board, 'X'):
        return -1
    elif check_winner(board, 'O'):
        return 1
    elif is_full(board):
        return 0
    
    # Maximizer's turn
    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'  # Simulate a move for the maximizing player
                    score = alphabeta(board, depth + 1, alpha, beta, False)
                    board[i][j] = ' '  # Undo the move
                    best_score = max(best_score, score)
                    alpha = max(alpha, best_score)
                    if beta <= alpha:
                        break
        return best_score
    
    # Minimizer's turn
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'  # Simulate a move for the minimizing player
                    score = alphabeta(board, depth + 1, alpha, beta, True)
                    board[i][j] = ' '  # Undo the move
                    best_score = min(best_score, score)
                    beta = min(beta, best_score)
                    if beta <= alpha:
                        break
        return best_score

def check_winner(board, player):
    """
    Check if the given player has won the game.

    Parameters:
    board (list): The Tic Tac Toe board.
    player (str): The current player ('X' or 'O').

    Returns:
    bool: True if the player has won, False otherwise.
    """
    # Check rows, columns, and diagonals
    for row in board:
        if all([cell == player for cell in row]):
            return True

    for col in range(3):
        if all([board[row][col] == player for row in range(3)]):
            return True

    if all([board[i][i] == player for i in range(3)]) or all([board[i][2 - i] == player for i in range(3)]):
        return True

    return False

def is_full(board):
    """
    Check if the board is full.

    Parameters:
    board (list): The Tic Tac Toe board.

    Returns:
    bool: True if the board is full, False otherwise.
    """
    return all([cell != ' ' for row in board for cell in row])

# Example usage:
if __name__ == "__main__":
    board = [
        ['X', 'O', ' '],
        [' ', 'O', ' '],
        ['X', ' ', ' ']
    ]

    score = alphabeta(board, 0, -math.inf, math.inf, False)
    print("Alpha-Beta score:", score)
