def is_safe(node, color, assignment, graph):
    """
    Check if it is safe to assign the given color to the node.

    Parameters:
    node (str): The current node to be colored.
    color (str): The color to be assigned.
    assignment (dict): The current color assignment.
    graph (dict): The adjacency list of the graph.

    Returns:
    bool: True if it is safe to assign the color, False otherwise.
    """
    for neighbor in graph[node]:
        if neighbor in assignment and assignment[neighbor] == color:
            return False
    return True

def backtracking(assignment, graph, colors):
    """
    Perform backtracking to solve the Map Coloring problem.

    Parameters:
    assignment (dict): The current color assignment.
    graph (dict): The adjacency list of the graph.
    colors (list): The list of available colors.

    Returns:
    bool: True if a solution is found, False otherwise.
    """
    if len(assignment) == len(graph):
        return True

    unassigned_nodes = [node for node in graph if node not in assignment]
    node = unassigned_nodes[0]

    for color in colors:
        if is_safe(node, color, assignment, graph):
            assignment[node] = color
            if backtracking(assignment, graph, colors):
                return True
            del assignment[node]

    return False

def map_coloring(graph, colors):
    """
    Solve the Map Coloring problem using backtracking.

    Parameters:
    graph (dict): The adjacency list of the graph.
    colors (list): The list of available colors.

    Returns:
    dict: The color assignment for each node if a solution is found, None otherwise.
    """
    assignment = {}
    if backtracking(assignment, graph, colors):
        return assignment
    else:
        return None

# Example usage:
if __name__ == "__main__":
    graph = {
        'A': ['B', 'C', 'D'],
        'B': ['A', 'C', 'E'],
        'C': ['A', 'B', 'D', 'E'],
        'D': ['A', 'C', 'E'],
        'E': ['B', 'C', 'D']
    }
    colors = ['Red', 'Green', 'Blue']

    result = map_coloring(graph, colors)
    if result:
        print("Coloring of the map:")
        for node, color in result.items():
            print(f"{node}: {color}")
    else:
        print("No solution found.")
